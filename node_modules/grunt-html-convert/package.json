{
  "name": "grunt-html-convert",
  "description": "Compiles html to JavaScript",
  "version": "0.0.2",
  "homepage": "https://github.com/soundstep/grunt-html-convert",
  "author": {
    "name": "Romuald Quantin",
    "email": "romu@soundstep.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/soundstep/grunt-html-convert.git"
  },
  "bugs": {
    "url": "https://github.com/soundstep/grunt-html-convert/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/soundstep/grunt-html-convert/blob/master/LICENSE-MIT"
    }
  ],
  "main": "GruntFile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-html-convert\n\n> Converts html templates to JavaScript\n\nThis is a fork of the [html2js repo](https://github.com/karlgoldstein/grunt-html2js), the original grunt task converts html to angular modules. This fork convert html to vanilla javascript.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-html-convert --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-html-convert');\n```\n\n## The \"htmlConvert\" task\n\n### Overview\n\nThis plugin converts a group of html files to JavaScript and assembles them into an vanilla javascript.\n\nNote that this plugin does *not* compile the templates.  It simply caches the template source code.\n\n### Setup\n\n```js\ngrunt.initConfig({\n  htmlConvert: {\n    options: {\n      // custom options, see below    \n    },\n    mytemplate: {\n      src: ['src/**/*.tpl.html'],\n      dest: 'tmp/templates.js'\n    },\n  },\n})\n```\n\nResult:\n\n```\nvar mytemplate = {};\nmytemplate['tile-item.tpl.html'] = '<div data-id=\"{{data.id}}\">\\n' +\n\t'\t{{data.title}}\\n' +\n\t'\t<img data-src=\"{{data.img}}\" />\\n' +\n\t'\t<button data-click=\"remove()\"></button>\\n' +\n\t'</div>';\n```\n\nNote that you should use relative paths to specify the template URL, to\nmatch the keys by which the template source is cached.\n\n### Gotchas\n\nThe `dest` property must be a string.  If it is an array, Grunt will fail when attempting to write the bundle file.\n\n### Options\n\n#### options.base\nType: `String`\nDefault value: `'src'`\n\nThe prefix relative to the project directory that should be stripped from each template path to produce a module identifier for the template.  For example, a template located at `src/projects/projects.tpl.html` would be identified as just `projects/projects.tpl.html`.\n\n#### options.target\nType: `String`\nDefault value: `'js'`\n\nLanguage of the output file. Possible values: `'coffee'`, `'js'`.\n\n#### options.module\nType: `String`\nDefault value: the task name\n\n#### options.rename\nType: `Function`\nDefault value: `none`\n\nA function that takes in the module identifier and returns the renamed module identifier to use instead for the template.  For example, a template located at `src/projects/projects.tpl.html` would be identified as `/src/projects/projects.tpl` with a rename function defined as:\n\n```\nfunction (moduleName) {\n  return '/' + moduleName.replace('.html', '');\n}\n```\n\n#### options.quoteChar\nType: `Character`\nDefault value: `\"`\n\nStrings are quoted with double-quotes by default.  However, for projects \nthat want strict single quote-only usage, you can specify:\n\n```\noptions: { quoteChar: '\\'' }\n```\n\nto use single quotes, or any other odd quoting character you want\n\n#### indentString\nType: `String`\nDefault value: `    `\n\nBy default a tab indent is used for the generated code. However,\nyou can specify alternate indenting via:\n\n```\noptions: { indentString: '    ' }\n```\n\n#### indentGlobal\nType: `String`\nDefault value: ``\n\nBy default there's global indentation. However, if all the generated code must indented,\nyou can specify it via:\n\n```\noptions: { indentGlobal: '    ' }\n```\n\n#### fileHeaderString:\nType: `String`\nDefault value: ``\n\nIf specified, this string  will get written at the top of the output\nTemplate.js file. As an example, jshint directives such as\n/* global soma: false */ can be put at the head of the file.\n\n#### ignore\nType: `RegExp`\nDefault value: ``\n\nIf specified, the regular expression match will not be escaped.\nAlso note the regular expression requires the global match flag to be set:\n```\noptions: { ignore: //g } \n```\n\n### Usage Examples\n\nSee the `Gruntfile.js` in the project source code for various configuration examples.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n0.0.1 convert the angular grunt task to vanilla javascript\n",
  "readmeFilename": "README.md",
  "_id": "grunt-html-convert@0.0.2",
  "dist": {
    "shasum": "f0c25f63da470aa4b7eccacbc2bd4b0fb5b99bd6"
  },
  "_from": "grunt-html-convert@0.0.2",
  "_resolved": "https://registry.npmjs.org/grunt-html-convert/-/grunt-html-convert-0.0.2.tgz"
}
